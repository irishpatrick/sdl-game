(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Asset {
    constructor() {
        this.x = 0;
        this.y = 0;
        this.ready = false;
        this.image = null;
    }
    callback() {
        this.ready = true;
    }
    loadImage(fn) {
        this.image = new Image();
        this.image.onload = this.callback;
        this.image.src = fn;
    }
    isReady() {
        return this.ready;
    }
}
exports.Asset = Asset;
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const viewport_1 = require("./viewport");
let editor = ace.edit("editor");
editor.setTheme("ace/theme/monokai");
editor.session.setMode("ace/mode/json");
let viewport = new viewport_1.Viewport();
let canvas = document.getElementById('canvas');
let ctx = canvas.getContext('2d');
let now, then, delta;
let mouse = { x: 0, y: 0 };
canvas.height = window.innerHeight;
window.addEventListener('resize', () => {
    canvas.height = window.innerHeight;
});
canvas.addEventListener('mousemove', (e) => {
    mouse.x = e.offsetX;
    mouse.y = e.offsetY;
    document.getElementById('mousepos').innerHTML = mouse.x + ',' + mouse.y;
});
canvas.addEventListener('mousedown', (e) => {
});
canvas.addEventListener('mouseup', (e) => {
});
function init() {
    util_1.Util.setClearColor(180, 180, 180);
    then = Date.now();
}
function update() {
    now = Date.now();
    delta = (now - then) / 1000.0;
    then = now;
}
function draw() {
    requestAnimationFrame(draw);
    util_1.Util.clear(ctx);
    update();
}
init();
draw();
},{"./util":3,"./viewport":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Util {
    static setClearColor(r, g, b) {
        this.clearColor = [r, g, b];
    }
    static clear(ctx) {
        ctx.fillStyle = 'rgb(' +
            this.clearColor[0] + ',' +
            this.clearColor[1] + ',' +
            this.clearColor[2] + ')';
        ctx.fillRect(0, 0, ctx.canvas.clientWidth, ctx.canvas.clientHeight);
    }
    static draw(ctx, asset, view) {
        let sx = 0;
        let sy = 0;
        if (view) {
            sx = (asset.x + view.x) * view.scale;
            sy = (asset.y + view.y) * view.scale;
        }
    }
    static drawGrid(ctx, view) {
        let spacing = 32 * view.scale;
    }
}
Util.clearColor = [0, 0, 0];
exports.Util = Util;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Viewport {
    constructor() {
        this.x = 0;
        this.y = 0;
        this.scale = 1;
    }
}
exports.Viewport = Viewport;
},{}]},{},[1,2,3,4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
